diff --git a/node_modules/@cosmjs/ledger-amino/build/demo/node.js b/node_modules/@cosmjs/ledger-amino/build/demo/node.js
index cdd58d0..154dc22 100644
--- a/node_modules/@cosmjs/ledger-amino/build/demo/node.js
+++ b/node_modules/@cosmjs/ledger-amino/build/demo/node.js
@@ -21,13 +21,13 @@ async function createSigner() {
     const ledgerTransport = await hw_transport_node_hid_1.default.create(interactiveTimeout, interactiveTimeout);
     return new ledgersigner_1.LedgerSigner(ledgerTransport, {
         testModeAllowed: true,
-        hdPaths: [amino_1.makeCosmoshubPath(0), amino_1.makeCosmoshubPath(1), amino_1.makeCosmoshubPath(2), amino_1.makeCosmoshubPath(10)],
+        hdPaths: [(0, amino_1.makeCosmoshubPath)(0), (0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(2), (0, amino_1.makeCosmoshubPath)(10)],
     });
 }
 exports.createSigner = createSigner;
 async function getAccounts(signer) {
     const accounts = await signer.getAccounts();
-    return accounts.map((account) => (Object.assign(Object.assign({}, account), { pubkey: encoding_1.toBase64(account.pubkey) })));
+    return accounts.map((account) => (Object.assign(Object.assign({}, account), { pubkey: (0, encoding_1.toBase64)(account.pubkey) })));
 }
 exports.getAccounts = getAccounts;
 async function sign(signer, accountNumber, fromAddress, toAddress) {
@@ -46,7 +46,7 @@ async function sign(signer, accountNumber, fromAddress, toAddress) {
             },
         },
     ];
-    const signDoc = amino_1.makeSignDoc(msgs, defaultFee, defaultChainId, defaultMemo, accountNumber, defaultSequence);
+    const signDoc = (0, amino_1.makeSignDoc)(msgs, defaultFee, defaultChainId, defaultMemo, accountNumber, defaultSequence);
     const { signature } = await signer.signAmino(fromAddress, signDoc);
     return signature;
 }
diff --git a/node_modules/@cosmjs/ledger-amino/build/demo/node.js.map b/node_modules/@cosmjs/ledger-amino/build/demo/node.js.map
index 61bdd6a..ab50348 100644
--- a/node_modules/@cosmjs/ledger-amino/build/demo/node.js.map
+++ b/node_modules/@cosmjs/ledger-amino/build/demo/node.js.map
@@ -1 +1 @@
-{"version":3,"file":"node.js","sourceRoot":"","sources":["../../src/demo/node.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAyD;AACzD,yCAAqF;AACrF,+CAA4C;AAC5C,4FAA+D;AAE/D,kDAA+C;AAE/C,MAAM,cAAc,GAAG,SAAS,CAAC;AACjC,MAAM,UAAU,GAAW;IACzB,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAC3C,GAAG,EAAE,KAAK;CACX,CAAC;AACF,MAAM,WAAW,GAAG,WAAW,CAAC;AAChC,MAAM,eAAe,GAAG,GAAG,CAAC;AAErB,KAAK,UAAU,YAAY;IAChC,MAAM,kBAAkB,GAAG,MAAO,CAAC;IACnC,MAAM,eAAe,GAAG,MAAM,+BAAgB,CAAC,MAAM,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;IAC9F,OAAO,IAAI,2BAAY,CAAC,eAAe,EAAE;QACvC,eAAe,EAAE,IAAI;QACrB,OAAO,EAAE,CAAC,yBAAiB,CAAC,CAAC,CAAC,EAAE,yBAAiB,CAAC,CAAC,CAAC,EAAE,yBAAiB,CAAC,CAAC,CAAC,EAAE,yBAAiB,CAAC,EAAE,CAAC,CAAC;KACnG,CAAC,CAAC;AACL,CAAC;AAPD,oCAOC;AAEM,KAAK,UAAU,WAAW,CAAC,MAAoB;IAOpD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC;IAC5C,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,iCAAM,OAAO,KAAE,MAAM,EAAE,mBAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,IAAG,CAAC,CAAC;AACvF,CAAC;AATD,kCASC;AAEM,KAAK,UAAU,IAAI,CACxB,MAAoB,EACpB,aAAqB,EACrB,WAAmB,EACnB,SAAiB;IAEjB,MAAM,IAAI,GAAG;QACX;YACE,IAAI,EAAE,oBAAoB;YAC1B,KAAK,EAAE;gBACL,MAAM,EAAE;oBACN;wBACE,MAAM,EAAE,SAAS;wBACjB,KAAK,EAAE,OAAO;qBACf;iBACF;gBACD,YAAY,EAAE,WAAW;gBACzB,UAAU,EAAE,SAAS;aACtB;SACF;KACF,CAAC;IACF,MAAM,OAAO,GAAG,mBAAW,CAAC,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;IAC3G,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACnE,OAAO,SAAS,CAAC;AACnB,CAAC;AAxBD,oBAwBC"}
\ No newline at end of file
+{"version":3,"file":"node.js","sourceRoot":"","sources":["../../src/demo/node.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAyD;AACzD,yCAAqF;AACrF,+CAA4C;AAC5C,4FAA+D;AAE/D,kDAA+C;AAE/C,MAAM,cAAc,GAAG,SAAS,CAAC;AACjC,MAAM,UAAU,GAAW;IACzB,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAC3C,GAAG,EAAE,KAAK;CACX,CAAC;AACF,MAAM,WAAW,GAAG,WAAW,CAAC;AAChC,MAAM,eAAe,GAAG,GAAG,CAAC;AAErB,KAAK,UAAU,YAAY;IAChC,MAAM,kBAAkB,GAAG,MAAO,CAAC;IACnC,MAAM,eAAe,GAAG,MAAM,+BAAgB,CAAC,MAAM,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;IAC9F,OAAO,IAAI,2BAAY,CAAC,eAAe,EAAE;QACvC,eAAe,EAAE,IAAI;QACrB,OAAO,EAAE,CAAC,IAAA,yBAAiB,EAAC,CAAC,CAAC,EAAE,IAAA,yBAAiB,EAAC,CAAC,CAAC,EAAE,IAAA,yBAAiB,EAAC,CAAC,CAAC,EAAE,IAAA,yBAAiB,EAAC,EAAE,CAAC,CAAC;KACnG,CAAC,CAAC;AACL,CAAC;AAPD,oCAOC;AAEM,KAAK,UAAU,WAAW,CAAC,MAAoB;IAOpD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC;IAC5C,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,iCAAM,OAAO,KAAE,MAAM,EAAE,IAAA,mBAAQ,EAAC,OAAO,CAAC,MAAM,CAAC,IAAG,CAAC,CAAC;AACvF,CAAC;AATD,kCASC;AAEM,KAAK,UAAU,IAAI,CACxB,MAAoB,EACpB,aAAqB,EACrB,WAAmB,EACnB,SAAiB;IAEjB,MAAM,IAAI,GAAG;QACX;YACE,IAAI,EAAE,oBAAoB;YAC1B,KAAK,EAAE;gBACL,MAAM,EAAE;oBACN;wBACE,MAAM,EAAE,SAAS;wBACjB,KAAK,EAAE,OAAO;qBACf;iBACF;gBACD,YAAY,EAAE,WAAW;gBACzB,UAAU,EAAE,SAAS;aACtB;SACF;KACF,CAAC;IACF,MAAM,OAAO,GAAG,IAAA,mBAAW,EAAC,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;IAC3G,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACnE,OAAO,SAAS,CAAC;AACnB,CAAC;AAxBD,oBAwBC"}
\ No newline at end of file
diff --git a/node_modules/@cosmjs/ledger-amino/build/demo/web.js b/node_modules/@cosmjs/ledger-amino/build/demo/web.js
index d5abb34..bd6960b 100644
--- a/node_modules/@cosmjs/ledger-amino/build/demo/web.js
+++ b/node_modules/@cosmjs/ledger-amino/build/demo/web.js
@@ -43,7 +43,7 @@ function createSignDoc(accountNumber, address) {
     return JSON.stringify(signDoc, null, 2);
 }
 window.updateMessage = (accountNumberInput) => {
-    utils_1.assert(typeof accountNumberInput === "string");
+    (0, utils_1.assert)(typeof accountNumberInput === "string");
     const accountNumber = math_1.Uint53.fromString(accountNumberInput).toNumber();
     const account = accounts[accountNumber];
     if (account === undefined) {
@@ -60,7 +60,7 @@ window.createSigner = async function createSigner() {
     const ledgerTransport = await hw_transport_webusb_1.default.create(interactiveTimeout, interactiveTimeout);
     return new ledgersigner_1.LedgerSigner(ledgerTransport, {
         testModeAllowed: true,
-        hdPaths: [amino_1.makeCosmoshubPath(0), amino_1.makeCosmoshubPath(1), amino_1.makeCosmoshubPath(2)],
+        hdPaths: [(0, amino_1.makeCosmoshubPath)(0), (0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(2)],
     });
 };
 window.getAccounts = async function getAccounts(signer) {
@@ -75,7 +75,7 @@ window.getAccounts = async function getAccounts(signer) {
     accountsDiv.textContent = "Loading...";
     try {
         accounts = await signer.getAccounts();
-        const prettyAccounts = accounts.map((account) => (Object.assign(Object.assign({}, account), { pubkey: encoding_1.toBase64(account.pubkey) })));
+        const prettyAccounts = accounts.map((account) => (Object.assign(Object.assign({}, account), { pubkey: (0, encoding_1.toBase64)(account.pubkey) })));
         accountsDiv.textContent = JSON.stringify(prettyAccounts, null, "\n");
         const accountNumber = 0;
         accountNumberInput.max = accounts.length - 1;
diff --git a/node_modules/@cosmjs/ledger-amino/build/demo/web.js.map b/node_modules/@cosmjs/ledger-amino/build/demo/web.js.map
index 447aa93..9054a91 100644
--- a/node_modules/@cosmjs/ledger-amino/build/demo/web.js.map
+++ b/node_modules/@cosmjs/ledger-amino/build/demo/web.js.map
@@ -1 +1 @@
-{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/demo/web.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/demo/web.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@cosmjs/ledger-amino/build/index.d.ts b/node_modules/@cosmjs/ledger-amino/build/index.d.ts
index 155dfd1..e46f3a6 100644
--- a/node_modules/@cosmjs/ledger-amino/build/index.d.ts
+++ b/node_modules/@cosmjs/ledger-amino/build/index.d.ts
@@ -1,2 +1,3 @@
 export { LaunchpadLedger } from "./launchpadledger";
+export * from "./ledgerapp";
 export { LedgerSigner } from "./ledgersigner";
diff --git a/node_modules/@cosmjs/ledger-amino/build/index.js b/node_modules/@cosmjs/ledger-amino/build/index.js
index 556af49..58bcaaa 100644
--- a/node_modules/@cosmjs/ledger-amino/build/index.js
+++ b/node_modules/@cosmjs/ledger-amino/build/index.js
@@ -1,8 +1,19 @@
 "use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __exportStar = (this && this.__exportStar) || function(m, exports) {
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
+};
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.LedgerSigner = exports.LaunchpadLedger = void 0;
 var launchpadledger_1 = require("./launchpadledger");
 Object.defineProperty(exports, "LaunchpadLedger", { enumerable: true, get: function () { return launchpadledger_1.LaunchpadLedger; } });
+__exportStar(require("./ledgerapp"), exports);
 var ledgersigner_1 = require("./ledgersigner");
 Object.defineProperty(exports, "LedgerSigner", { enumerable: true, get: function () { return ledgersigner_1.LedgerSigner; } });
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@cosmjs/ledger-amino/build/launchpadledger.d.ts b/node_modules/@cosmjs/ledger-amino/build/launchpadledger.d.ts
index 897166a..daf8a2b 100644
--- a/node_modules/@cosmjs/ledger-amino/build/launchpadledger.d.ts
+++ b/node_modules/@cosmjs/ledger-amino/build/launchpadledger.d.ts
@@ -1,6 +1,7 @@
 /// <reference types="ledgerhq__hw-transport" />
 import { HdPath } from "@cosmjs/crypto";
 import Transport from "@ledgerhq/hw-transport";
+import { LedgerApp } from "./ledgerapp";
 export interface LedgerAppErrorResponse {
     readonly error_message?: string;
     readonly device_locked?: boolean;
@@ -27,6 +28,15 @@ export interface LaunchpadLedgerOptions {
      * Defaults to "1.5.3".
      */
     readonly minLedgerAppVersion?: string;
+    /**
+     * Application used to interact with the Ledger.
+     * This allows you to use this connector with forks of the Cosmos Hub Ledger app.
+     * Support is provided on an best effort basis and only as long as those forks do not
+     * significantly differ from the original app.
+     *
+     * Defaults to "CosmosApp"
+     */
+    readonly ledgerApp?: LedgerApp;
 }
 export declare class LaunchpadLedger {
     private readonly testModeAllowed;
diff --git a/node_modules/@cosmjs/ledger-amino/build/launchpadledger.js b/node_modules/@cosmjs/ledger-amino/build/launchpadledger.js
index 1bb2b3b..c1aee7d 100644
--- a/node_modules/@cosmjs/ledger-amino/build/launchpadledger.js
+++ b/node_modules/@cosmjs/ledger-amino/build/launchpadledger.js
@@ -14,13 +14,13 @@ const semver_1 = __importDefault(require("semver"));
 function unharden(hdPath) {
     return hdPath.map((n) => (n.isHardened() ? n.toNumber() - 2 ** 31 : n.toNumber()));
 }
-const cosmosHdPath = amino_1.makeCosmoshubPath(0);
+const cosmosHdPath = (0, amino_1.makeCosmoshubPath)(0);
 const cosmosBech32Prefix = "cosmos";
 const cosmosLedgerAppName = "Cosmos";
 const requiredCosmosAppVersion = "1.5.3";
 class LaunchpadLedger {
     constructor(transport, options = {}) {
-        var _a, _b, _c, _d, _e;
+        var _a, _b, _c, _d, _e, _f;
         const defaultOptions = {
             hdPaths: [cosmosHdPath],
             prefix: cosmosBech32Prefix,
@@ -33,11 +33,11 @@ class LaunchpadLedger {
         this.prefix = (_c = options.prefix) !== null && _c !== void 0 ? _c : defaultOptions.prefix;
         this.ledgerAppName = (_d = options.ledgerAppName) !== null && _d !== void 0 ? _d : defaultOptions.ledgerAppName;
         this.minLedgerAppVersion = (_e = options.minLedgerAppVersion) !== null && _e !== void 0 ? _e : defaultOptions.requiredLedgerAppVersion;
-        this.app = new ledger_cosmos_js_1.default(transport);
+        this.app = (_f = options === null || options === void 0 ? void 0 : options.ledgerApp) !== null && _f !== void 0 ? _f : new ledger_cosmos_js_1.default(transport);
     }
     async getCosmosAppVersion() {
         await this.verifyCosmosAppIsOpen();
-        utils_1.assert(this.app, `${this.ledgerAppName} Ledger App is not connected`);
+        (0, utils_1.assert)(this.app, `${this.ledgerAppName} Ledger App is not connected`);
         const response = await this.app.getVersion();
         this.handleLedgerErrors(response);
         // eslint-disable-next-line @typescript-eslint/naming-convention
@@ -47,7 +47,7 @@ class LaunchpadLedger {
     }
     async getPubkey(hdPath) {
         await this.verifyDeviceIsReady();
-        utils_1.assert(this.app, `${this.ledgerAppName} Ledger App is not connected`);
+        (0, utils_1.assert)(this.app, `${this.ledgerAppName} Ledger App is not connected`);
         const hdPathToUse = hdPath || this.hdPaths[0];
         // ledger-cosmos-js hardens the first three indices
         const response = await this.app.publicKey(unharden(hdPathToUse));
@@ -63,10 +63,10 @@ class LaunchpadLedger {
     }
     async sign(message, hdPath) {
         await this.verifyDeviceIsReady();
-        utils_1.assert(this.app, `${this.ledgerAppName} Ledger App is not connected`);
+        (0, utils_1.assert)(this.app, `${this.ledgerAppName} Ledger App is not connected`);
         const hdPathToUse = hdPath || this.hdPaths[0];
         // ledger-cosmos-js hardens the first three indices
-        const response = await this.app.sign(unharden(hdPathToUse), encoding_1.fromUtf8(message));
+        const response = await this.app.sign(unharden(hdPathToUse), (0, encoding_1.fromUtf8)(message));
         this.handleLedgerErrors(response, "Transaction signing request was rejected by the user");
         return crypto_1.Secp256k1Signature.fromDer(response.signature).toFixedLength();
     }
@@ -76,7 +76,7 @@ class LaunchpadLedger {
         }
     }
     async getOpenAppName() {
-        utils_1.assert(this.app, `${this.ledgerAppName} Ledger App is not connected`);
+        (0, utils_1.assert)(this.app, `${this.ledgerAppName} Ledger App is not connected`);
         const response = await this.app.appInfo();
         this.handleLedgerErrors(response);
         return response.appName;
diff --git a/node_modules/@cosmjs/ledger-amino/build/ledgerapp.d.ts b/node_modules/@cosmjs/ledger-amino/build/ledgerapp.d.ts
new file mode 100644
index 0000000..d86d027
--- /dev/null
+++ b/node_modules/@cosmjs/ledger-amino/build/ledgerapp.d.ts
@@ -0,0 +1,60 @@
+/// <reference types="node" />
+export interface ErrorResponse {
+    readonly return_code: number;
+    readonly error_message: string;
+}
+export interface VersionResponse {
+    readonly major: number;
+    readonly minor: number;
+    readonly patch: number;
+    readonly test_mode: boolean;
+    readonly error_message: string;
+    readonly device_locked: boolean;
+}
+export interface AppInfoResponse {
+    readonly appName: string;
+    readonly error_message: string;
+}
+export interface PublicKeyResponse {
+    readonly compressed_pk: Buffer;
+    readonly error_message: string;
+}
+export interface AddressAndPublicKeyResponse {
+    readonly compressed_pk: Buffer;
+    readonly address: string;
+    readonly error_message: string;
+}
+export interface SignResponse {
+    readonly signature: Buffer;
+    readonly error_message: string;
+}
+/**
+ * Interface that represents a Ledger application.
+ */
+export interface LedgerApp {
+    /**
+     * Gets the application version.
+     */
+    getVersion(): Promise<VersionResponse | ErrorResponse>;
+    /**
+     * Gets the application information.
+     */
+    appInfo(): Promise<AppInfoResponse | ErrorResponse>;
+    /**
+     * Gets the public key derived from the provided path.
+     * @param path Derivation path used to generate the public key.
+     */
+    publicKey(path: Array<number>): Promise<PublicKeyResponse | ErrorResponse>;
+    /**
+     * Shows the address to the user.
+     * @param path Derivation path used to generate the public key.
+     * @param hrp Address prefix like cosmos.
+     */
+    showAddressAndPubKey(path: Array<number>, hrp: string): Promise<AddressAndPublicKeyResponse | ErrorResponse>;
+    /**
+     * Sign a message using the key derived from the provided derivation path.
+     * @param path Path used to derive the key.
+     * @param message Payload to be signed.
+     */
+    sign(path: Array<number>, message: string): Promise<SignResponse | ErrorResponse>;
+}
diff --git a/node_modules/@cosmjs/ledger-amino/build/ledgerapp.js b/node_modules/@cosmjs/ledger-amino/build/ledgerapp.js
new file mode 100644
index 0000000..d14585d
--- /dev/null
+++ b/node_modules/@cosmjs/ledger-amino/build/ledgerapp.js
@@ -0,0 +1,3 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+//# sourceMappingURL=ledgerapp.js.map
\ No newline at end of file
diff --git a/node_modules/@cosmjs/ledger-amino/build/ledgersigner.js b/node_modules/@cosmjs/ledger-amino/build/ledgersigner.js
index 2368724..54385bc 100644
--- a/node_modules/@cosmjs/ledger-amino/build/ledgersigner.js
+++ b/node_modules/@cosmjs/ledger-amino/build/ledgersigner.js
@@ -5,7 +5,7 @@ const amino_1 = require("@cosmjs/amino");
 const launchpadledger_1 = require("./launchpadledger");
 class LedgerSigner {
     constructor(transport, options = {}) {
-        this.hdPaths = options.hdPaths || [amino_1.makeCosmoshubPath(0)];
+        this.hdPaths = options.hdPaths || [(0, amino_1.makeCosmoshubPath)(0)];
         this.ledger = new launchpadledger_1.LaunchpadLedger(transport, options);
     }
     async getAccounts() {
@@ -25,13 +25,13 @@ class LedgerSigner {
         if (accountIndex === -1) {
             throw new Error(`Address ${signerAddress} not found in wallet`);
         }
-        const message = amino_1.serializeSignDoc(signDoc);
+        const message = (0, amino_1.serializeSignDoc)(signDoc);
         const accountForAddress = accounts[accountIndex];
         const hdPath = this.hdPaths[accountIndex];
         const signature = await this.ledger.sign(message, hdPath);
         return {
             signed: signDoc,
-            signature: amino_1.encodeSecp256k1Signature(accountForAddress.pubkey, signature),
+            signature: (0, amino_1.encodeSecp256k1Signature)(accountForAddress.pubkey, signature),
         };
     }
 }
diff --git a/node_modules/@cosmjs/ledger-amino/build/ledgersigner.spec.js b/node_modules/@cosmjs/ledger-amino/build/ledgersigner.spec.js
index 926895f..7d0384b 100644
--- a/node_modules/@cosmjs/ledger-amino/build/ledgersigner.spec.js
+++ b/node_modules/@cosmjs/ledger-amino/build/ledgersigner.spec.js
@@ -46,38 +46,38 @@ async function createTransport() {
 }
 describe("LedgerSigner", () => {
     const defaultChainId = "testing";
-    const defaultFee = stargate_1.calculateFee(80000, "0.025ucosm");
+    const defaultFee = (0, stargate_1.calculateFee)(80000, "0.025ucosm");
     const defaultMemo = "Some memo";
     const defaultSequence = "0";
     const defaultAccountNumber = "42";
     const defaultLedgerAddress = "cosmos1p6xs63q4g7np99ttv5nd3yzkt8n4qxa47w8aea";
     let transport;
     beforeAll(async () => {
-        if (testutils_spec_1.simappEnabled()) {
+        if ((0, testutils_spec_1.simappEnabled)()) {
             const wallet = await amino_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
             const client = await stargate_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.endpoint, wallet);
-            const amount = amino_1.coins(226644, "ucosm");
+            const amount = (0, amino_1.coins)(226644, "ucosm");
             const memo = "Ensure chain has my pubkey";
             const sendResult = await client.sendTokens(testutils_spec_1.faucet.address, defaultLedgerAddress, amount, defaultFee, memo);
-            stargate_1.assertIsBroadcastTxSuccess(sendResult);
+            (0, stargate_1.assertIsDeliverTxSuccess)(sendResult);
         }
     });
     beforeEach(async () => {
-        if (testutils_spec_1.ledgerEnabled()) {
+        if ((0, testutils_spec_1.ledgerEnabled)()) {
             transport = await createTransport();
         }
     });
     afterEach(async () => {
-        if (testutils_spec_1.ledgerEnabled()) {
+        if ((0, testutils_spec_1.ledgerEnabled)()) {
             await transport.close();
         }
     });
     describe("getAccount", () => {
         it("works", async () => {
-            testutils_spec_1.pendingWithoutLedger();
+            (0, testutils_spec_1.pendingWithoutLedger)();
             const signer = new ledgersigner_1.LedgerSigner(transport, {
                 testModeAllowed: true,
-                hdPaths: [amino_1.makeCosmoshubPath(0), amino_1.makeCosmoshubPath(1), amino_1.makeCosmoshubPath(10)],
+                hdPaths: [(0, amino_1.makeCosmoshubPath)(0), (0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(10)],
             });
             const accounts = await signer.getAccounts();
             expect(accounts.length).toEqual(3);
@@ -85,17 +85,17 @@ describe("LedgerSigner", () => {
                 {
                     address: "cosmos1p6xs63q4g7np99ttv5nd3yzkt8n4qxa47w8aea",
                     algo: "secp256k1",
-                    pubkey: encoding_1.fromBase64("A66JoCNaNSXDsyj4qW7JgqXPTz5rOnfE6EKEArf4jJEK"),
+                    pubkey: (0, encoding_1.fromBase64)("A66JoCNaNSXDsyj4qW7JgqXPTz5rOnfE6EKEArf4jJEK"),
                 },
                 {
                     address: "cosmos1meeu3jl268txxytwmmrsljk8rawh6n2majstn2",
                     algo: "secp256k1",
-                    pubkey: encoding_1.fromBase64("AtvmGuZvEN3NwL05BQdxl3XygUf+Vl/930fhFMt1HTyU"),
+                    pubkey: (0, encoding_1.fromBase64)("AtvmGuZvEN3NwL05BQdxl3XygUf+Vl/930fhFMt1HTyU"),
                 },
                 {
                     address: "cosmos1f3pws3ztnp3s4nn5zxqdrl9vlqv5avkqmlrus4",
                     algo: "secp256k1",
-                    pubkey: encoding_1.fromBase64("A2ZnLEcbpyjS30H5UF1vezq29aBcT9oo5EARATIW9Cpj"),
+                    pubkey: (0, encoding_1.fromBase64)("A2ZnLEcbpyjS30H5UF1vezq29aBcT9oo5EARATIW9Cpj"),
                 },
             ]);
         });
@@ -103,54 +103,54 @@ describe("LedgerSigner", () => {
     describe("sign", () => {
         afterEach(async () => {
             // It seems the Ledger device needs a bit of time to recover
-            await utils_1.sleep(500);
+            await (0, utils_1.sleep)(500);
         });
         it("returns valid signature", async () => {
-            testutils_spec_1.pendingWithoutLedger();
+            (0, testutils_spec_1.pendingWithoutLedger)();
             const signer = new ledgersigner_1.LedgerSigner(transport, {
                 testModeAllowed: true,
-                hdPaths: [amino_1.makeCosmoshubPath(0), amino_1.makeCosmoshubPath(1), amino_1.makeCosmoshubPath(10)],
+                hdPaths: [(0, amino_1.makeCosmoshubPath)(0), (0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(10)],
             });
             const [firstAccount] = await signer.getAccounts();
             const msgs = [
                 {
                     type: "cosmos-sdk/MsgSend",
                     value: {
-                        amount: amino_1.coins(1234567, "ucosm"),
+                        amount: (0, amino_1.coins)(1234567, "ucosm"),
                         from_address: firstAccount.address,
                         to_address: defaultLedgerAddress,
                     },
                 },
             ];
-            const signDoc = amino_1.makeSignDoc(msgs, defaultFee, defaultChainId, defaultMemo, defaultAccountNumber, defaultSequence);
+            const signDoc = (0, amino_1.makeSignDoc)(msgs, defaultFee, defaultChainId, defaultMemo, defaultAccountNumber, defaultSequence);
             const { signed, signature } = await signer.signAmino(firstAccount.address, signDoc);
             expect(signed).toEqual(signDoc);
-            const valid = await crypto_1.Secp256k1.verifySignature(crypto_1.Secp256k1Signature.fromFixedLength(encoding_1.fromBase64(signature.signature)), crypto_1.sha256(amino_1.serializeSignDoc(signed)), firstAccount.pubkey);
+            const valid = await crypto_1.Secp256k1.verifySignature(crypto_1.Secp256k1Signature.fromFixedLength((0, encoding_1.fromBase64)(signature.signature)), (0, crypto_1.sha256)((0, amino_1.serializeSignDoc)(signed)), firstAccount.pubkey);
             expect(valid).toEqual(true);
         }, interactiveTimeout);
         it("creates signature accepted by Launchpad backend", async () => {
-            testutils_spec_1.pendingWithoutLedger();
-            testutils_spec_1.pendingWithoutLaunchpad();
+            (0, testutils_spec_1.pendingWithoutLedger)();
+            (0, testutils_spec_1.pendingWithoutLaunchpad)();
             const signer = new ledgersigner_1.LedgerSigner(transport, {
                 testModeAllowed: true,
-                hdPaths: [amino_1.makeCosmoshubPath(0), amino_1.makeCosmoshubPath(1), amino_1.makeCosmoshubPath(10)],
+                hdPaths: [(0, amino_1.makeCosmoshubPath)(0), (0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(10)],
             });
             const [firstAccount] = await signer.getAccounts();
             const client = new launchpad_1.SigningCosmosClient(testutils_spec_1.launchpad.endpoint, firstAccount.address, signer);
-            const result = await client.sendTokens(defaultLedgerAddress, amino_1.coins(1234567, "ucosm"));
-            launchpad_1.assertIsBroadcastTxSuccess(result);
+            const result = await client.sendTokens(defaultLedgerAddress, (0, amino_1.coins)(1234567, "ucosm"));
+            (0, launchpad_1.assertIsBroadcastTxSuccess)(result);
         }, interactiveTimeout);
         it("creates signature accepted by Stargate backend", async () => {
-            testutils_spec_1.pendingWithoutLedger();
-            testutils_spec_1.pendingWithoutSimapp();
+            (0, testutils_spec_1.pendingWithoutLedger)();
+            (0, testutils_spec_1.pendingWithoutSimapp)();
             const signer = new ledgersigner_1.LedgerSigner(transport, {
                 testModeAllowed: true,
-                hdPaths: [amino_1.makeCosmoshubPath(0), amino_1.makeCosmoshubPath(1), amino_1.makeCosmoshubPath(10)],
+                hdPaths: [(0, amino_1.makeCosmoshubPath)(0), (0, amino_1.makeCosmoshubPath)(1), (0, amino_1.makeCosmoshubPath)(10)],
             });
             const [firstAccount] = await signer.getAccounts();
             const client = await stargate_1.SigningStargateClient.connectWithSigner(testutils_spec_1.simapp.endpoint, signer);
-            const result = await client.sendTokens(firstAccount.address, defaultLedgerAddress, amino_1.coins(1234, "ucosm"), defaultFee);
-            stargate_1.assertIsBroadcastTxSuccess(result);
+            const result = await client.sendTokens(firstAccount.address, defaultLedgerAddress, (0, amino_1.coins)(1234, "ucosm"), defaultFee);
+            (0, stargate_1.assertIsDeliverTxSuccess)(result);
         }, interactiveTimeout);
     });
 });
