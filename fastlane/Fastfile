# Global variables to simplify the individual adjustment
PROJECT_NAME = "DesmosProfileManager"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds/"

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

# Define utility function to check if a string is a valid integer
class String
  def is_integer?
    self.to_i.to_s == self
  end
end

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def build_number_from_git(xcodeproj)
    version_code = ''
    if ENV['VERSION_OVERRIDE'] != nil
      version_code = ENV['VERSION_OVERRIDE']
    else
      git_tag = last_git_tag
      version_code = git_tag.sub('v', '')
    end

    versions = version_code.split('.')
    if versions.length < 3
      raise Exception.new "invalid version #{version_code}, expected format x.y.z"
    end

    # Extract version
    major = versions[0]
    intermediate = versions[1]

    # Check if the minor have the -RC
    minorParts = versions[2].split('-RC')
    minor = minorParts[0]
    rc = '99'
    if minorParts.length > 1
      rc = minorParts[1]
      if rc.length == 0 or rc.length > 2
        raise Exception.new "Invalid value #{rc}, must have length > 0 and <= 2"
      end
      if rc == '99'
        raise Exception.new "Invalid value #{rc}, max allowed value is 98"
      end
    end

    if intermediate.length == 1
      intermediate = "0#{intermediate}"
    end
    if minor.length == 1
      minor = "0#{minor}"
    end
    if rc.length == 1
      rc = "0#{rc}"
    end

    build_number_str = "#{major}#{intermediate}#{minor}#{rc}"
    if not build_number_str.is_integer?
      raise Exception.new "Invalid build number #{build_number_str}, must be a valid integer"
    end
    build_number = build_number_str.to_i


    # Set marketing version to version_number
    sh("sed -i '' -e 's/MARKETING_VERSION \= [^\;]*\;/MARKETING_VERSION = #{version_code};/' ../ios/#{PROJECT_NAME}.xcodeproj/project.pbxproj")

    increment_build_number(
        xcodeproj: xcodeproj,
        build_number: build_number
    )
end

platform :ios do
  lane :build_ipa do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: false
    )

    build_number_from_git(XCODE_PROJECT)

    cocoapods(
      clean_install: true,
      podfile: "./ios/Podfile"
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: ENV["GIT_AUTHORIZATION"],
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      configuration: "Release",
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    delete_temp_keychain(keychain_name)
  end

  lane :closed_beta do
    # Build signed ipa
    build_ipa

    # Deploy to test flight
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "#{OUTPUT_DIRECTORY}#{PROJECT_NAME}.ipa"
    )
  end
end

###############################################################

platform :android do
  lane :prepare_keystore do
    # Expand keystore from enviroment variable
    sh(
      command: "rm -f /tmp/keystore.jks && echo $ANDROID_KEYSTORE_BASE64 | base64 --decode >> /tmp/keystore.jks",
      log: false
    )
    # Check keystore integrity
    sh(
      command: "md5sum /tmp/keystore.jks"
    )

    sh(
        command: "echo '4683f0f906c894411c0b4e0db125b603 /tmp/keystore.jks' | md5sum -c -"
    )
  end

  lane :prepare_playstore_key do
    sh(
      command: "rm -f /tmp/playstore-key.json && printf '#{ENV["PLAYSTORE_JSON_KEY"]}' | base64 --decode >> /tmp/playstore-key.json",
      log: false
    )

    validate_play_store_json_key(
      json_key: '/tmp/playstore-key.json'
    )
  end

  lane :build_apk do
    # Prepares keystore to sign the application in /tmp/keystore.jks
    prepare_keystore

    gradle(task: 'clean', project_dir: "android/")

    gradle(
      task: "assemble",
      build_type: "Release",
      print_command: false,
      project_dir: "android/",
      properties: {
        "android.injected.signing.store.file" => "/tmp/keystore.jks",
        "android.injected.signing.store.password" => ENV["ANDROID_SIGNING_STORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_SIGNING_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_SIGNING_KEY_PASSWORD"],
      }
    )
  end

  lane :build_bundle do
    # Prepares keystore to sign the application in /tmp/keystore.jks
    prepare_keystore

    gradle(task: 'clean', project_dir: "android/")

    gradle(
      task: "bundle",
      build_type: "Release",
      print_command: false,
      project_dir: "android/",
      properties: {
        "android.injected.signing.store.file" => "/tmp/keystore.jks",
        "android.injected.signing.store.password" => ENV["ANDROID_SIGNING_STORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_SIGNING_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_SIGNING_KEY_PASSWORD"],
      }
    )
  end

  lane :deploy_to_internal_testing do
    # Build the application bundle
    build_bundle

    # Prepares the playstore key in /tmp/playstore-key.json
    prepare_playstore_key

    # Deplsy the bundle to the playstore
    supply(
      package_name: 'network.desmos.dpm',
      track: 'internal',
      json_key: '/tmp/playstore-key.json',
      aab: 'android/app/build/outputs/bundle/release/app-release.aab',
      # Uncomment this line to just upload without publishing
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_apk: true,
    )
  end
end
