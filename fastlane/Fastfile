# Global variables to simplify the individual adjustment
PROJECT_NAME = "DesmosProfileManager"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./fastlane/builds/"

# Common variable
VERSION_OVERRIDE = ENV['VERSION_OVERRIDE']

# iOS variables
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

# Android variable
ANDROID_PLAYSTORE_JSON_KEY = ENV["PLAYSTORE_JSON_KEY"]
ANDROID_KEYSTORE_BASE64 = ENV["ANDROID_KEYSTORE_BASE64"]
ANDROID_SIGNING_STORE_PASSWORD = ENV["ANDROID_SIGNING_STORE_PASSWORD"]
ANDROID_SIGNING_ALIAS = ENV["ANDROID_SIGNING_ALIAS"]
ANDROID_SIGNING_KEY_PASSWORD = ENV["ANDROID_SIGNING_KEY_PASSWORD"]
ANDROID_USE_LOCAL_KEYSTORE = ENV["ANDROID_USE_LOCAL_KEYSTORE"] != nil

# Define utility function to check if a string is a valid integer
def is_integer(value)
    value.to_i.to_s == value
end

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def version_name_from_git()
  version_code = ''
  if VERSION_OVERRIDE != nil
    version_name = VERSION_OVERRIDE
  else
    git_tag = last_git_tag
    version_name = git_tag.sub('v', '')
  end

  versions = version_name.split('.')
  if versions.length < 3
    raise Exception.new "invalid version #{version_name}, expected format x.y.z"
  end

  return version_name
end

def build_number_from_git()
  version_code = ''
  if VERSION_OVERRIDE != nil
    version_code = VERSION_OVERRIDE
  else
    git_tag = last_git_tag
    version_code = git_tag.sub('v', '')
  end

  versions = version_code.split('.')
  if versions.length < 3
    raise Exception.new "invalid version #{version_code}, expected format x.y.z"
  end

  # Extract version
  major = versions[0]
  intermediate = versions[1]

  # Check if the minor have the -RC
  minorParts = versions[2].split('-RC')
  minor = minorParts[0]
  rc = '99'
  if minorParts.length > 1
    rc = minorParts[1]
    if rc.length == 0 or rc.length > 2
      raise Exception.new "Invalid value #{rc}, must have length > 0 and <= 2"
    end
    if rc == '99'
      raise Exception.new "Invalid value #{rc}, max allowed value is 98"
    end
  end

  if intermediate.length == 1
    intermediate = "0#{intermediate}"
  end
  if minor.length == 1
    minor = "0#{minor}"
  end
  if rc.length == 1
    rc = "0#{rc}"
  end

  build_number_str = "#{major}#{intermediate}#{minor}#{rc}"
  if not is_integer(build_number_str)
    raise Exception.new "Invalid build number #{build_number_str}, must be a valid integer"
  end

  return build_number_str.to_i
end

platform :ios do
  lane :build_ipa do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: false
    )

    version_name = version_name_from_git()
    build_number = build_number_from_git()

    # Set marketing version to version_number
    sh("sed -i '' -e 's/MARKETING_VERSION \= [^\;]*\;/MARKETING_VERSION = #{version_name};/' ../ios/#{PROJECT_NAME}.xcodeproj/project.pbxproj")

    # Set application build number
    increment_build_number(
        xcodeproj: xcodeproj,
        build_number: build_number
    )

    cocoapods(
      clean_install: true,
      podfile: "./ios/Podfile"
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: GIT_AUTHORIZATION,
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      scheme: PROJECT_NAME,
      workspace: XCODE_WORKSPACE,
      configuration: "Release",
      output_directory: OUTPUT_DIRECTORY,
      output_name: "#{PROJECT_NAME}.ipa",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    delete_temp_keychain(keychain_name)
  end

  lane :closed_beta do
    # Build signed ipa
    build_ipa

    # Deploy to test flight
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "#{OUTPUT_DIRECTORY}#{PROJECT_NAME}.ipa"
    )
  end
end

###############################################################

def get_gradle_properties()
  build_number = build_number_from_git()
  version_name = version_name_from_git()

  common = {
    "buildNumber" => build_number,
    "versionName" => version_name,
    "reactNativeArchitectures" => "armeabi-v7a,arm64-v8a",
  }

  if ANDROID_USE_LOCAL_KEYSTORE
    return common
  end

  return common.merge({
    "DPM_RELEASE_STORE_FILE" => "/tmp/keystore.jks",
    "DPM_RELEASE_STORE_PASSWORD" => ANDROID_SIGNING_STORE_PASSWORD,
    "DPM_RELEASE_KEY_ALIAS" => ANDROID_SIGNING_ALIAS,
    "DPM_RELEASE_KEY_PASSWORD" => ANDROID_SIGNING_KEY_PASSWORD,
  })
end

platform :android do
  lane :prepare_keystore do
    if ANDROID_USE_LOCAL_KEYSTORE
      UI.important 'Skip keystore preparation, using the local one'
      next
    end

    # Expand keystore from environment variable
    sh(
      command: "rm -f /tmp/keystore.jks && printf '#{ANDROID_KEYSTORE_BASE64}' | base64 --decode >> /tmp/keystore.jks",
      log: false
    )

    # Check keystore integrity
    sh(
      command: "md5sum /tmp/keystore.jks"
    )
    sh(
        command: "echo '4683f0f906c894411c0b4e0db125b603 /tmp/keystore.jks' | md5sum -c -"
    )
  end

  lane :prepare_playstore_key do
    sh(
      command: "rm -f /tmp/playstore-key.json && printf '#{ANDROID_PLAYSTORE_JSON_KEY}' | base64 --decode >> /tmp/playstore-key.json",
      log: false
    )

    validate_play_store_json_key(
      json_key: '/tmp/playstore-key.json'
    )
  end

  lane :clean do
    gradle(task: 'clean', project_dir: "android/")
  end

  lane :build_apk do
    # Prepares keystore to sign the application in /tmp/keystore.jks
    prepare_keystore

    gradle(
      task: "assemble",
      build_type: "Release",
      print_command: false,
      project_dir: "android/",
      properties: get_gradle_properties()
    )
  end

  lane :build_bundle do
    # Prepares keystore to sign the application in /tmp/keystore.jks
    prepare_keystore

    gradle(
      task: "bundle",
      build_type: "Release",
      print_command: false,
      project_dir: "android/",
      properties: get_gradle_properties()
    )
  end

  lane :deploy_to_internal_testing do
    # Prepares the playstore key in /tmp/playstore-key.json
    prepare_playstore_key

    # Deploy the bundle to the PlayStore
    supply(
      package_name: 'network.desmos.dpm',
      # use 'production' to upload to all the users.
      track: 'internal',
      json_key: '/tmp/playstore-key.json',
      aab: 'android/app/build/outputs/bundle/release/app-release.aab',
      # Uncomment this line to just upload without publishing
      release_status: 'draft',
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_apk: true,
    )
  end
end
